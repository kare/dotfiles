{"_id":"xregexp","_rev":"29-c250abefa9070797334f6237baa15fcb","name":"xregexp","description":"Extended regular expressions","dist-tags":{"latest":"3.0.0"},"versions":{"1.5.0":{"name":"xregexp","version":"1.5.0","description":"The one of a kind JavaScript regular expression library.","author":{"name":"Steven Levithan","email":"steves_list@hotmail.com"},"contributors":[{"name":"Bjarke Walling","email":"bwp@bwp.dk"}],"repository":{"type":"git","url":"git://github.com/walling/xregexp.git"},"main":"./index.js","engines":{"node":">= 0.4.0"},"_npmJsonOpts":{"file":"/home/bjarke/.npm/xregexp/1.5.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"xregexp@1.5.0","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.13","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"ae377617bd0ca52ca3656d10fd5c07ef7fe6f018","tarball":"http://registry.npmjs.org/xregexp/-/xregexp-1.5.0.tgz"},"scripts":{},"directories":{}},"1.5.1":{"name":"xregexp","version":"1.5.1","description":"The one of a kind JavaScript regular expression library.","author":{"name":"Steven Levithan","email":"steves_list@hotmail.com"},"contributors":[{"name":"Bjarke Walling","email":"bwp@bwp.dk"}],"repository":{"type":"git","url":"git://github.com/walling/xregexp.git"},"main":"./index.js","engines":{"node":">= 0.4.0"},"_npmUser":{"name":"walling","email":"bwp@bwp.dk"},"_id":"xregexp@1.5.1","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-2","_nodeVersion":"v0.6.8","_defaultsLoaded":true,"dist":{"shasum":"c8f11b7bd696d60f912a292ceae11d02959b7d57","tarball":"http://registry.npmjs.org/xregexp/-/xregexp-1.5.1.tgz"},"maintainers":[{"name":"walling","email":"bwp@bwp.dk"}],"directories":{}},"1.5.2":{"name":"xregexp","version":"1.5.2","description":"The one of a kind JavaScript regular expression library.","author":{"name":"Steven Levithan","email":"steves_list@hotmail.com"},"contributors":[{"name":"Bjarke Walling","email":"bwp@bwp.dk"}],"repository":{"type":"git","url":"git://github.com/walling/xregexp.git"},"main":"./index.js","engines":{"node":">= 0.4.0"},"_npmUser":{"name":"walling","email":"bwp@bwp.dk"},"_id":"xregexp@1.5.2","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-2","_nodeVersion":"v0.6.8","_defaultsLoaded":true,"dist":{"shasum":"7e8e27bbbb5fc950569f8d94706e8841a477f53f","tarball":"http://registry.npmjs.org/xregexp/-/xregexp-1.5.2.tgz"},"maintainers":[{"name":"walling","email":"bwp@bwp.dk"}],"directories":{}},"1.5.3":{"name":"xregexp","version":"1.5.3","description":"The one of a kind JavaScript regular expression library.","author":{"name":"Steven Levithan","email":"steves_list@hotmail.com"},"contributors":[{"name":"Bjarke Walling","email":"bwp@bwp.dk"}],"repository":{"type":"git","url":"git://github.com/walling/xregexp.git"},"main":"./index.js","engines":{"node":">= 0.4.0"},"_npmUser":{"name":"walling","email":"bwp@bwp.dk"},"_id":"xregexp@1.5.3","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"73bcd99eaff37dee3b941e204d4440267f47ac2c","tarball":"http://registry.npmjs.org/xregexp/-/xregexp-1.5.3.tgz"},"maintainers":[{"name":"walling","email":"bwp@bwp.dk"}],"directories":{}},"2.0.0":{"name":"xregexp","version":"2.0.0","homepage":"http://xregexp.com/","author":{"name":"Steven Levithan","email":"steves_list@hotmail.com"},"license":"MIT","repository":{"type":"git","url":"git://github.com/slevithan/XRegExp.git"},"description":"Extended JavaScript regular expressions","keywords":["regex","regexp"],"main":"./xregexp-all.js","scripts":{"test":"node tests/node-qunit.js"},"devDependencies":{"qunit":">= 0.2.x"},"_npmUser":{"name":"slevithan","email":"steves_list@hotmail.com"},"_id":"xregexp@2.0.0","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"52a63e56ca0b84a7f3a5f3d61872f126ad7a5943","tarball":"http://registry.npmjs.org/xregexp/-/xregexp-2.0.0.tgz"},"maintainers":[{"name":"walling","email":"bwp@bwp.dk"},{"name":"slevithan","email":"steves_list@hotmail.com"}],"directories":{}},"3.0.0":{"name":"xregexp","version":"3.0.0","description":"Extended regular expressions","homepage":"http://xregexp.com/","author":{"name":"Steven Levithan","email":"steves_list@hotmail.com"},"license":"MIT","repository":{"type":"git","url":"git+https://github.com/slevithan/xregexp.git"},"keywords":["regex","regexp"],"main":"xregexp-all.js","files":["LICENSE","xregexp-all.js"],"scripts":{"build":"./tools/concatenate-source.sh"},"gitHead":"8183679d136bda6c0d015160a912ce2e54375917","bugs":{"url":"https://github.com/slevithan/xregexp/issues"},"_id":"xregexp@3.0.0","_shasum":"a04f25d9ffe16c1aee40ed521a1b1366e8d34636","_from":".","_npmVersion":"2.14.3","_nodeVersion":"3.3.1","_npmUser":{"name":"slevithan","email":"steves_list@hotmail.com"},"dist":{"shasum":"a04f25d9ffe16c1aee40ed521a1b1366e8d34636","tarball":"http://registry.npmjs.org/xregexp/-/xregexp-3.0.0.tgz"},"maintainers":[{"name":"slevithan","email":"steves_list@hotmail.com"}],"directories":{}}},"maintainers":[{"name":"slevithan","email":"steves_list@hotmail.com"}],"time":{"modified":"2015-09-22T06:51:49.796Z","created":"2011-06-30T16:20:48.897Z","1.5.0":"2011-06-30T16:20:49.667Z","1.5.1":"2012-02-23T19:19:22.617Z","1.5.2":"2012-03-06T15:14:53.317Z","1.5.3":"2012-03-09T13:11:09.388Z","2.0.0":"2012-05-25T21:45:04.860Z","3.0.0":"2015-09-22T06:51:49.796Z"},"author":{"name":"Steven Levithan","email":"steves_list@hotmail.com"},"repository":{"type":"git","url":"git+https://github.com/slevithan/xregexp.git"},"users":{"kastor":true,"leesei":true,"citguy":true,"akiva":true,"schnittstabil":true,"alpigc":true,"f124275809":true,"vwal":true},"homepage":"http://xregexp.com/","keywords":["regex","regexp"],"license":"MIT","readme":"ï»¿[XRegExp](http://xregexp.com/) 3.0.0\n====================================\n\nXRegExp provides augmented and extensible JavaScript regular expressions. You get new syntax, flags, and methods beyond what browsers support natively. XRegExp is also a regex utility belt with tools to make your client-side grepping simpler and more powerful, while freeing you from worrying about pesky cross-browser inconsistencies and things like manually manipulating `lastIndex` or slicing strings when tokenizing.\n\nXRegExp supports all native ES6 regular expression syntax. It supports Internet Explorer 5.5+, Firefox 1.5+, Chrome, Safari 3+, and Opera 11+. You can also use it with Node.js, or as a RequireJS module. The base library is about 4.25 KB, minified and gzipped.\n\n## Performance\n\nXRegExp regexes compile to native `RegExp` objects, and therefore perform just as fast as native regular expressions. There is a tiny extra cost when compiling a pattern for the first time.\n\n## Usage examples\n\n```js\n// Using named capture and flag x (free-spacing and line comments)\nvar date = XRegExp('(?<year>  [0-9]{4} ) -?  # year  \\n\\\n                    (?<month> [0-9]{2} ) -?  # month \\n\\\n                    (?<day>   [0-9]{2} )     # day   ', 'x');\n\n// XRegExp.exec gives you named backreferences on the match result\nvar match = XRegExp.exec('2015-02-22', date);\nmatch.year; // -> '2015'\n\n// It also includes optional pos and sticky arguments\nvar pos = 3, result = [];\nwhile (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d+)>/, pos, 'sticky')) {\n    result.push(match[1]);\n    pos = match.index + match[0].length;\n} // result -> ['2', '3', '4']\n\n// XRegExp.replace allows named backreferences in replacements\nXRegExp.replace('2015-02-22', date, '${month}/${day}/${year}'); // -> '02/22/2015'\nXRegExp.replace('2015-02-22', date, function(match) {\n    return match.month + '/' + match.day + '/' + match.year;\n}); // -> '02/22/2015'\n\n// In fact, XRegExps compile to RegExps and work perfectly with native methods\ndate.test('2015-02-22'); // -> true\n\n// The *only* caveat is that named captures must be referenced using numbered backreferences\n'2015-02-22'.replace(date, '$2/$3/$1'); // -> '02/22/2015'\n\n// If you want, you can extend native methods so you don't have to worry about this.\n// Doing so also fixes numerous browser bugs in the native methods\nXRegExp.install('natives');\n'2015-02-22'.replace(date, '${month}/${day}/${year}'); // -> '02/22/2015'\n'2015-02-22'.replace(date, function(match) {\n    return match.month + '/' + match.day + '/' + match.year;\n}); // -> '02/22/2015'\ndate.exec('2015-02-22').year; // -> '2015'\n\n// Extract every other digit from a string using XRegExp.forEach\nvar evens = [];\nXRegExp.forEach('1a2345', /\\d/, function(match, i) {\n    if (i % 2) evens.push(+match[0]);\n});\n// evens -> [2, 4]\n\n// Get numbers within <b> tags using XRegExp.matchChain\nXRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\n    XRegExp('(?is)<b>.*?</b>'),\n    /\\d+/\n]); // -> ['2', '4', '56']\n\n// You can also pass forward and return specific backreferences\nvar html = '<a href=\"http://xregexp.com/\">XRegExp</a>' +\n           '<a href=\"http://www.google.com/\">Google</a>';\nXRegExp.matchChain(html, [\n    {regex: /<a href=\"([^\"]+)\">/i, backref: 1},\n    {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\n]); // -> ['xregexp.com', 'www.google.com']\n\n// Merge strings and regexes into a single pattern, safely rewriting backreferences\nXRegExp.union(['a+b*c', /(dog)\\1/, /(cat)\\1/], 'i');\n// -> /a\\+b\\*c|(dog)\\1|(cat)\\2/i\n```\n\nThese examples should give you the flavor of what's possible, but XRegExp has more syntax, flags, methods, options, and browser fixes that aren't shown here. You can even augment XRegExp's regular expression syntax with addons (see below) or write your own. See [xregexp.com](http://xregexp.com/) for more details.\n\n## Addons\n\nYou can either load addons individually, or bundle all addons together with XRegExp by loading `xregexp-all.js`. XRegExp's [npm](http://npmjs.org/) package uses `xregexp-all.js`, so addons are always available when XRegExp is installed using npm.\n\n### Unicode\n\nIn browsers, first include the Unicode Base script and then one or more of the addons for Unicode blocks, categories, properties, or scripts.\n\n```html\n<script src=\"src/xregexp.js\"></script>\n<script src=\"src/addons/unicode-base.js\"></script>\n<script src=\"src/addons/unicode-categories.js\"></script>\n<script src=\"src/addons/unicode-scripts.js\"></script>\n```\n\nThen you can do this:\n\n```js\n// Test the Unicode category L (Letter)\nvar unicodeWord = XRegExp('^\\\\pL+$');\nunicodeWord.test('Ð ÑÑÑÐºÐ¸Ð¹'); // -> true\nunicodeWord.test('æ¥æ¬èª'); // -> true\nunicodeWord.test('Ø§ÙØ¹Ø±Ø¨ÙØ©'); // -> true\n\n// Test some Unicode scripts\nXRegExp('^\\\\p{Hiragana}+$').test('ã²ãããª'); // -> true\nXRegExp('^[\\\\p{Latin}\\\\p{Common}]+$').test('Ãber CafÃ©.'); // -> true\n```\n\nBy default, `\\p{â¦}` and `\\P{â¦}` support the Basic Multilingual Plane (i.e. code points up to `U+FFFF`). You can opt-in to full 21-bit Unicode support (with code points up to `U+10FFFF`) on a per-regex basis by using flag `A`. In XRegExp, this is called *astral mode*. You can automatically apply astral mode for all new regexes by running `XRegExp.install('astral')`. When in astral mode, `\\p{â¦}` and `\\P{â¦}` always match a full code point rather than a code unit, using surrogate pairs for code points above `U+FFFF`.\n\n```js\n// Using flag A. The test string uses a surrogate pair to represent U+1F4A9\nXRegExp('^\\\\pS$', 'A').test('\\uD83D\\uDCA9'); // -> true\n\n// Implicit flag A\nXRegExp.install('astral');\nXRegExp('^\\\\pS$').test('\\uD83D\\uDCA9'); // -> true\n```\n\nOpting in to astral mode disables the use of `\\p{â¦}` and `\\P{â¦}` within character classes. In astral mode, use e.g. `(\\pL|[0-9_])+` instead of `[\\pL0-9_]+`.\n\nXRegExp uses Unicode 8.0.0.\n\n### XRegExp.build\n\nIn browsers, first include the script:\n\n```html\n<script src=\"src/xregexp.js\"></script>\n<script src=\"src/addons/build.js\"></script>\n```\n\nYou can then build regular expressions using named subpatterns, for readability and pattern reuse:\n\n```js\nvar time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {\n    hours: XRegExp.build('{{h12}} : | {{h24}}', {\n        h12: /1[0-2]|0?[1-9]/,\n        h24: /2[0-3]|[01][0-9]/\n    }),\n    minutes: /^[0-5][0-9]$/\n});\n\ntime.test('10:59'); // -> true\nXRegExp.exec('10:59', time).minutes; // -> '59'\n```\n\nNamed subpatterns can be provided as strings or regex objects. A leading `^` and trailing unescaped `$` are stripped from subpatterns if both are present, which allows embedding independently-useful anchored patterns. `{{â¦}}` tokens can be quantified as a single unit. Any backreferences in the outer pattern or provided subpatterns are automatically renumbered to work correctly within the larger combined pattern. The syntax `({{name}})` works as shorthand for named capture via `(?<name>{{name}})`. Named subpatterns cannot be embedded within character classes.\n\nSee also: *[Creating Grammatical Regexes Using XRegExp.build](http://blog.stevenlevithan.com/archives/grammatical-patterns-xregexp-build)*.\n\n### XRegExp.matchRecursive\n\nIn browsers, first include the script:\n\n```html\n<script src=\"src/xregexp.js\"></script>\n<script src=\"src/addons/matchrecursive.js\"></script>\n```\n\nYou can then match recursive constructs using XRegExp pattern strings as left and right delimiters:\n\n```js\nvar str = '(t((e))s)t()(ing)';\nXRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');\n// -> ['t((e))s', '', 'ing']\n\n// Extended information mode with valueNames\nstr = 'Here is <div> <div>an</div></div> example';\nXRegExp.matchRecursive(str, '<div\\\\s*>', '</div>', 'gi', {\n    valueNames: ['between', 'left', 'match', 'right']\n});\n/* -> [\n{name: 'between', value: 'Here is ',       start: 0,  end: 8},\n{name: 'left',    value: '<div>',          start: 8,  end: 13},\n{name: 'match',   value: ' <div>an</div>', start: 13, end: 27},\n{name: 'right',   value: '</div>',         start: 27, end: 33},\n{name: 'between', value: ' example',       start: 33, end: 41}\n] */\n\n// Omitting unneeded parts with null valueNames, and using escapeChar\nstr = '...{1}\\\\{{function(x,y){return y+x;}}';\nXRegExp.matchRecursive(str, '{', '}', 'g', {\n    valueNames: ['literal', null, 'value', null],\n    escapeChar: '\\\\'\n});\n/* -> [\n{name: 'literal', value: '...', start: 0, end: 3},\n{name: 'value',   value: '1',   start: 4, end: 5},\n{name: 'literal', value: '\\\\{', start: 6, end: 8},\n{name: 'value',   value: 'function(x,y){return y+x;}', start: 9, end: 35}\n] */\n\n// Sticky mode via flag y\nstr = '<1><<<2>>><3>4<5>';\nXRegExp.matchRecursive(str, '<', '>', 'gy');\n// -> ['1', '<<2>>', '3']\n```\n\n`XRegExp.matchRecursive` throws an error if it scans past an unbalanced delimiter in the target string.\n\n## Installation and usage\n\nIn browsers:\n\n```html\n<script src=\"src/xregexp.js\"></script>\n```\n\nOr, to bundle XRegExp with all of its addons:\n\n```html\n<script src=\"xregexp-all.js\"></script>\n```\n\nUsing [npm](http://npmjs.org/):\n\n```bash\nnpm install xregexp\n```\n\nIn [Node.js](http://nodejs.org/):\n\n```js\nvar XRegExp = require('xregexp');\n```\nThe [CommonJS](http://wiki.commonjs.org/wiki/Modules)-style `require('xregexp').XRegExp` also works.\n\nIn an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire({paths: {xregexp: 'xregexp-all'}}, ['xregexp'], function(XRegExp) {\n    console.log(XRegExp.version);\n});\n```\n\n## Changelog\n\n* Releases: [Version history](http://xregexp.com/history/).\n* Upcoming: [Issue tracker](https://github.com/slevithan/xregexp/issues).\n\n## About\n\nXRegExp copyright 2007-2015 by [Steven Levithan](http://stevenlevithan.com/).\n\nTools: Unicode range generators by [Mathias Bynens](http://mathiasbynens.be/), and adapted from his [unicode-data](https://github.com/mathiasbynens/unicode-data) project. Source file concatenator by [Bjarke Walling](http://twitter.com/walling).\n\nTests: Uses [Jasmine](http://pivotal.github.com/jasmine/) for unit tests, and [Benchmark.js](http://benchmarkjs.com) for performance tests.\n\nPrior art: `XRegExp.build` inspired by [Lea Verou](http://lea.verou.me/)'s [RegExp.create](http://lea.verou.me/2011/03/create-complex-regexps-more-easily/). `XRegExp.union` inspired by [Ruby](http://www.ruby-lang.org/). XRegExp's syntax extensions and flags come from [Perl](http://www.perl.org/), [.NET](http://www.microsoft.com/net), etc.\n\nAll code, including addons, tools, and tests, is released under the terms of the [MIT License](http://mit-license.org/).\n\nFork me to show support, fix, and extend.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/slevithan/xregexp/issues"},"_attachments":{},"_etag":"\"6BBKQ82EBNSSWUW23MILYCOZD\""}