#!/bin/bash

function usage() {
	echo "usage: middleware [-h]Â [name]" 1>&2
	echo "	generate Go middleware for net.http" 1>&2
	echo "	-h	print help message and exit" 1>&2
	echo "	name	of the function to generate" 1>&2
}
POSITIONAL=()
while [[ $# -gt 0 ]]; do
	key="$1"
	case $key in
	-h)
		usage
		exit 1
	;;
	*)
		POSITIONAL+=("$1") # save it in an array for later
		shift # past argument
	esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

name="TODO"
if [[ -n $1 ]]; then
	name=$1
fi
cat << __MIDDLEWARE_STD__
func $name(next http.Handler) http.Handler {
	fn := func(w http.ResponseWriter, r *http.Request) {
		switch r.Method {
		http.MethodGet:
			fmt.Fprintf(w, "Hello world!\\n")
		default:
			status := http.StatusNotImplemented
			http.Error(w, http.StatusText(status), status)
			return
		}
		next.ServeHTTP(w, r)
	}
	return http.HandlerFunc(fn)
}
__MIDDLEWARE_STD__
